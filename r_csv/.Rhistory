1+1
src/download_data.r.
mean(state[["population"]])
read.csv(file.path(PSDS_PATH, 'data', 'state.csv'))
read.csv(file ="C:\Users\sangbin.lim\Documents\R\R-4.1.1\statistics-for-data-scientists-master\statistics-for-data-scientists-master\src"
read.csv(file ="C:\Users\sangbin.lim\Desktop\임상빈\R 관련 파일\psds_data-20210913T080520Z-001\psds_data\state.csv")
read.csv(file ="\Users\sangbin.lim\Desktop\임상빈\R 관련 파일\psds_data-20210913T080520Z-001\psds_data\state.csv")
read.csv(file ='\Users\sangbin.lim\Desktop\임상빈\R 관련 파일\psds_data-20210913T080520Z-001\psds_data\state.csv')
read.csv(file.path(PSDS_PATH, 'data', 'state.csv'))
mean(state[["population"]])
PSDS_PATH <- file.path('~', 'statistics-for-data-scientists')
dir.create(file.path(PSDS_PATH, 'figures'))
library(descr)
# Import the datasets needed for chapter 1
PSDS_PATH <- file.path('~', 'statistics-for-data-scientists')
dir.create(file.path(PSDS_PATH, 'figures'))
state <- read.csv(file.path(PSDS_PATH, 'data', 'state.csv'))
dfw <- read.csv(file.path(PSDS_PATH, 'data', 'dfw_airline.csv'))
sp500_px <- read.csv(file.path(PSDS_PATH, 'data', 'sp500_px.csv'))
sp500_sym <- read.csv(file.path(PSDS_PATH, 'data', 'sp500_sym.csv'), stringsAsFactors = FALSE)
kc_tax <- read.csv(file.path(PSDS_PATH, 'data', 'kc_tax.csv'))
lc_loans <- read.csv(file.path(PSDS_PATH, 'data', 'lc_loans.csv'))
m1
m1 < - lm(mpg ~ weight, data = data3)
load("C:/Users/sangbin.lim/Desktop/임상빈/학교/ST3189/MT3189(L40)/Lecture 2 Basic Concepts and Linear Reg (Part 1)/.RData")
m1 <- lm(mpg ~ weight, data = data2)
summary(m1)
corrplot(cor(data2, use = "pairwise.complete"), type = "lower")
plot(x = data2$weight, y = data2$mpg, main = "Regression Line with weight as sole factor")
plot(x = data3$weight, y = data3$mpg, main = "Regression Line with weight as sole factor")
abline(m1, col = "red")
identify(x = data3$weight, y = data3$mpg)
plot(x = data3$weight, y = data3$mpg, main = "Regression Line with weight as sole factor")
abline(m1, col = "red")
identify(x = data3$weight, y = data3$mpg)
residuals(m1)
ml
m1
summary(m1)
sd
plot(x = data3$weight, y = data3$mpg, main = "Regression Line with weight as sole factor")
abline(m1, col = "red")
identify(x = data3$weight, y = data3$mpg)
identify(x = data3$weight, y = data3$mpg)
residuals(m1)
par(mfrow = c(2,2))
plot(m1)
par(mfrow = c(1,1))
plot(m1)
plot(m1)
m2 <- lm(mpg ~ weight + I(weight^2), data = data2)
summary(m2)
plot(m2)
par(mfrow = c(2,2))
plot(m2)
plot(x = data3$weight, y = data3$mpg, main = "Regression Line with weight as sole factor")
abline(m1, col = "red")
table1 <- data.frame(x = data2$weight, y = predict(m2))
table1 <- table1[order(table1$x),]
lines(x = table1$x, y = table1$y, col = "blue")
par(mfrow = c(1,1))
plot(m2)
plot(x = data3$weight, y = data3$mpg, main = "Regression Line with weight as sole factor")
abline(m1, col = "red")
lines(x = table1$x, y = table1$y, col = "blue")
library(caTools)
set.seed(3189)
train <- sample.split(Y = data3$mpg, SplitRatio = 0.7)
trainset <- subset(data2, train == T)
trainset <- subset(data2, train == F)
testset <- subset(data2, train == F)
trainset <- subset(data2, train == T)
m3 = lm(mpg ~ weight + I(weight^2), data = trainset)
summary(m3)
RMSE.m3.train <- sqrt(mean(residuals(m3)^2))
predict.m3.test <- predict(m3, newdata = testset)
testset.error <- testset$mpg - predict.m3.test
RMSE.m3.test <- sqrt(mean(testset.error^2))
View(testset)
View(testset)
View(trainset)
View(testset)
View(table1)
RMSE.m3.test <- sqrt(mean(testset.error^2))
plot(m3)
RMSE.m3.test <- sqrt(mean(testset.error^2))
summary(m3)
plot m3
plot(m3)
par(mfrow = c(2,2))
plot(m3)
plot(m2)
plot(m3)
plot(m2)
plot(m3)
plot(m3)
plot(m2)
plot(m3)
plot(m2)
plot(m3)
plot(m2)
plot(m3)
par(mfrow = c(3,3))
plot(m3)
par(mfrow = c(2,2))
plot((m3))
table1 <- data.frame(x = data2$weight, y = predict(m2))
table1 <- table1[order(table1$x),]
lines(x = table1$x, y = table1$y, col = "blue")
plot(x = data2$weight, y = data2$mpg, main = "Regression Line with weight as sole factor")
lines(x = table1$x, y = table1$y, col = "blue")
abline(m1, col = "red")
par(mfrow = c(1,1))
plot(x = data2$weight, y = data2$mpg, main = "Regression Line with weight as sole factor")
abline(m1, col = "red")
abline(m1, col = "red")
lines(x = table1$x, y = table1$y, col = "blue")
plot((m3))
plot(x = testset, y = trainset, main = "Regression Line with weight as sole factor")
plot(x = m32$weight, y = m3$mpg, main = "Regression Line with weight as sole factor")
plot(x = testset, y = trainset, main = "Regression Line with weight as sole factor")
plot(x = m3$weight, y = m3$mpg, main = "Regression Line with weight as sole factor")
plot(x = testset$mpg, y = trainset$mpg, main = "Regression Line with weight as sole factor")
plot(x = data3$weight, y = data3$mpg, main = "Regression Line with weight as sole factor")
table2 <- data.frame(x = testset, y = trainset)
table2 <- data.frame(x = testset, y = predict(m3))
table2 <- data.frame(x = data3$weight, y = predict(m3))
table2 <- data.frame(x = data3$weight, y = predict(m2))
table2 <- data.frame(x = data3$mpg, y = predict(m2))
View(testset)
library(corrplot)
library(caTools)
table2 <- data.frame(x = data3$weight, y = predict(m2))
m3 <- lm(mpg ~ weight + I(weight^2), data = trainset)
RMSE.m3.train <- sqrt(mean(residuals(m3)^2))
predict.m3.test <- predict(m3, newdata = testset)
testset.error <- testset$mpg - predict.m3.test
RMSE.m3.test <- sqrt(mean(testset.error^2))
plot(m3)
lines(x = table1$x, y = table1$y, col = "blue")
lines(x = testset$mpg, y = trainset$mpg, col = "blue")
print(i)
print(i)
print(i)
print(1:10)
print(i)
for (i in 1:10) {
print(i)
}
knitr::opts_chunk$set(echo = TRUE)
for (i in 1:10) {print (i)}
load("C:/Users/sangbin.lim/assignment2/r_csv/.RData")
View(wiki_scrapping)
View(wiki_scrapping)
View(wiki_data)
setwd("C:/Users/sangbin.lim/assignment2/r_csv")
library(rvest)
html <- read_html("https://en.wikipedia.org/wiki/Comma-separated_values")
html
csv_table <- html %>%
html_nodes(xpath='//*[@id="mw-content-text"]/div[1]/table[2]') %>%
html_table()
csv_table
csv_table <- html %>%
html_nodes(xpath='//*[@id="mw-content-text"]/div[1]/table[2]') %>%
html_table()
csv_table
csv_table <- html %>%
html_nodes(xpath='//*[@id="mw-content-text"]/div[1]/table[2]') %>%
html_table()
csv_table
write.csv(csv_table, file = "car.csv", row.names = FALSE)
write.table(csv_table_alt, file = "car_alt.csv", quote = FALSE, col.names = FALSE, row.names = FALSE)
write.csv(csv_table, file = "car.csv", row.names = FALSE)
csv_table
write.csv(csv_table_alt, file = "car_alt.csv", quote = FALSE, col.names = FALSE, row.names = FALSE)
write.table(csv_table, file = "car1.csv", row.names = FALSE)
?write
write.table(csv_table, file = "car1.csv", row.names = FALSE)
write.csv(csv_table, file = "car.csv", row.names = FALSE)
write.csv(csv_table, file = "car.csv")
write.csv(csv_table, file = "car2.csv")
write.csv(csv_table, file = "car.csv", row.names = FALSE)
?write.csv
write.csv(csv_table, file = "car.csv", row.names = FALSE)
df1=read.csv("car.csv")
df1
class(df1)
str(df1)
?str
df1
write.csv(csv_table, file = "car.csv", row.names = FALSE)
df1=read.csv("car.csv")
class(df1)
str(df1)
csv_table2 <- html %>%
#html_nodes("table") %>% #superceded by html_elements()
html_elements("table") %>%
html_table()
csv_table2
csv_table_alt <- html %>%
html_elements(xpath='//*[@id="mw-content-text"]/div[1]/pre[1]/text()') %>%
html_text()
csv_table_alt <- html %>%
html_elements(xpath='//*[@id="mw-content-text"]/div[1]/pre[1]/text()') %>%
html_text()
install.packages("magrittr")
install.packages("dplyr")
csv_table_alt <- html %>%
html_elements(xpath='//*[@id="mw-content-text"]/div[1]/pre[1]/text()') %>%
html_text()
csv_table_alt <- html %>%
html_elements(xpath='//*[@id="mw-content-text"]/div[1]/pre[1]/text()') %>%
html_text()
csv_table_alt <- html %>%
html_elements(xpath='//*[@id="mw-content-text"]/div[1]/pre[1]/text()') %>%
html_text()
